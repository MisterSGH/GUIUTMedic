package guiutmedic;

import guiutmedic.clases.Cita;
import guiutmedic.clases.CitaBD;
import guiutmedic.clases.ConexionBD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

public class frmReagendar extends javax.swing.JInternalFrame {

    private final int idPaciente;
    private final Map<Integer, Cita> mapaCitas = new HashMap<>();
    private final CitaBD citaBD = new CitaBD();
    private final ConexionBD conexionBD = new ConexionBD();

    public frmReagendar(int idPaciente) {
        initComponents();
        this.idPaciente = idPaciente;
        initFormulario();
    }

    frmReagendar(int idCita, int idPerfil) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void initFormulario() {
        cargarCitasPaciente();
        habilitarControles(false);
    }

    private void cargarCitasPaciente() {
        Connection conn = null;
        try {
            conn = conexionBD.conexionDataBase();
            String sql = "SELECT idCita, fecha, hora, motivo, estado "
                       + "FROM cita "
                       + "WHERE idPerfil = ? AND estado IN ('Programada', 'Reprogramada') "
                       + "ORDER BY fecha DESC, hora DESC";
            
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setInt(1, idPaciente);
                ResultSet rs = ps.executeQuery();
                
                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
                mapaCitas.clear();
                
                while (rs.next()) {
                    Cita cita = new Cita();
                    cita.setIdCita(rs.getInt("idCita"));
                    cita.setFecha(rs.getString("fecha"));
                    cita.setHora(rs.getString("hora"));
                    cita.setMotivo(rs.getString("motivo"));
                    cita.setEstado(rs.getString("estado"));
                    
                    String textoCita = "Cita #" + cita.getIdCita() + " - "
                                    + cita.getFecha() + " " + cita.getHora() + " - "
                                    + cita.getMotivo();
                    
                    model.addElement(textoCita);
                    mapaCitas.put(cita.getIdCita(), cita);
                }
                
                cmbCita.setModel(model);
                
                if (model.getSize() == 0) {
                    JOptionPane.showMessageDialog(this, 
                        "No tienes citas programadas para reagendar", 
                        "Informacion", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar citas: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            }
        }

    private void habilitarControles(boolean habilitar) {
        jDateChooser1.setEnabled(habilitar);
        timePicker1.setEnabled(habilitar);
        cbmMotivo.setEnabled(habilitar);
        btnReagendar.setEnabled(habilitar);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbCita = new javax.swing.JComboBox<>();
        lblHora = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblMotivo = new javax.swing.JLabel();
        btnReagendar = new javax.swing.JButton();
        cbmMotivo = new javax.swing.JComboBox<>();
        lblCita = new javax.swing.JLabel();
        btnCancelar = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        timePicker1 = new com.github.lgooddatepicker.components.TimePicker();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        cmbCita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCitaActionPerformed(evt);
            }
        });

        lblHora.setText("Hora:");

        lblFecha.setText("Fecha:");

        lblMotivo.setText("Motivo:");

        btnReagendar.setText("Reagendar Cita");
        btnReagendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReagendarActionPerformed(evt);
            }
        });

        cbmMotivo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Situacion Personal", "Horario Ocupado", "Otro" }));
        cbmMotivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbmMotivoActionPerformed(evt);
            }
        });

        lblCita.setText("Elige la Cita:");

        btnCancelar.setText("Cancelar Cita");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFecha)
                        .addGap(12, 12, 12)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReagendar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar)
                        .addGap(50, 50, 50))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblCita)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHora)
                                    .addComponent(lblMotivo))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addComponent(cbmMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCita)
                    .addComponent(cmbCita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFecha))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHora)
                    .addComponent(timePicker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMotivo)
                    .addComponent(cbmMotivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReagendar)
                    .addComponent(btnCancelar))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCitaActionPerformed
        if (cmbCita.getSelectedItem() == null) return;
        
        String seleccion = cmbCita.getSelectedItem().toString();
        try {
            int idCita = extraerIdCita(seleccion);
            Cita cita = mapaCitas.get(idCita);
            
            if (cita != null) {
                cargarDatosCita(cita);
                habilitarControles(true);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Error al obtener cita: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private int extraerIdCita(String textoCita) {
        int startIndex = textoCita.indexOf("#") + 1;
        int endIndex = textoCita.indexOf(" -", startIndex);
        return Integer.parseInt(textoCita.substring(startIndex, endIndex).trim());
    }
    
    private void cargarDatosCita(Cita cita) {
        try {
            jDateChooser1.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(cita.getFecha()));
            timePicker1.setText(cita.getHora());
            cbmMotivo.setSelectedItem(cita.getMotivo());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al cargar datos: " + ex.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbCitaActionPerformed

    private void btnReagendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReagendarActionPerformed
if (cmbCita.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(this, 
                "Seleccione una cita primero", 
                "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String seleccion = cmbCita.getSelectedItem().toString();
        Connection conn = null;
        try {
            conn = conexionBD.conexionDataBase();
            int idCita = extraerIdCita(seleccion);
            
            // Validar nueva fecha/hora
            String nuevaFecha = new SimpleDateFormat("yyyy-MM-dd").format(jDateChooser1.getDate());
            String nuevaHora = timePicker1.getText();
            
            if (nuevaHora == null || nuevaHora.isEmpty()) {
                JOptionPane.showMessageDialog(this, 
                    "Seleccione una hora valida", 
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            // Reagendar usando la clase CitaBD
            if (citaBD.reagendarCita(conn, idCita, idPaciente, nuevaFecha, nuevaHora)) {
                JOptionPane.showMessageDialog(this, 
                    "Cita reagendada con exito", 
                    "Exito", JOptionPane.INFORMATION_MESSAGE);
                
                // Actualizar interfaz
                cargarCitasPaciente();
                habilitarControles(false);
                cmbCita.setSelectedIndex(-1);
            } else {
                JOptionPane.showMessageDialog(this, 
                    "Error al reagendar la cita", 
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
                "Error al reagendar: " + ex.getMessage(), 
                "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
        }
    }//GEN-LAST:event_btnReagendarActionPerformed

    private void cbmMotivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbmMotivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbmMotivoActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
      
    }//GEN-LAST:event_btnCancelarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnReagendar;
    private javax.swing.JComboBox<String> cbmMotivo;
    private javax.swing.JComboBox<String> cmbCita;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel lblCita;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblMotivo;
    private com.github.lgooddatepicker.components.TimePicker timePicker1;
    // End of variables declaration//GEN-END:variables
}